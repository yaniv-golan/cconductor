#!/bin/bash
# Markdown Output Formatter
# Converts research JSON to well-formatted Markdown report

set -euo pipefail

RESEARCH_FILE="$1"

if [ ! -f "$RESEARCH_FILE" ]; then
    echo "Error: Research file not found: $RESEARCH_FILE"
    exit 1
fi

# Generate markdown report
cat <<EOF
# Research Report

**Generated**: $(date "+%Y-%m-%d %H:%M:%S")
**Session**: $(basename "$(dirname "$RESEARCH_FILE")")

---

## 📋 Executive Summary

$(jq -r '.summary' "$RESEARCH_FILE")

---

## 🔍 Detailed Findings

$(jq -r '.sections[]? | "### \(.title)\n\n\(.content)\n\n**Confidence**: `\(.confidence // "medium")`\n\n**Sources**:\n\(.citations[]? | "- [\(.title)](\(.url)) - Accessed: \(.date // "N/A")")\n"' "$RESEARCH_FILE")

---

## ⚖️ Conflicting Information

$(if jq -e '.conflicting_information | length > 0' "$RESEARCH_FILE" >/dev/null 2>&1; then
    jq -r '.conflicting_information[]? | "### \(.topic)\n\n\(.perspectives[]? | "**Perspective**: \(.claim)\n\n**Sources**: \(.sources | join(", "))\n")\n**Resolution**: \(.resolution)\n"' "$RESEARCH_FILE"
else
    echo "No conflicting information found."
fi)

---

## ✅ Validation Results

$(jq -r '.validation.validation_summary | "**Overall Confidence**: `\(.overall_confidence)`\n\n**Statistics**:\n- Total Claims: \(.total_claims)\n- Verified: \(.verified_claims)\n- Questionable: \(.questionable_claims)\n- Unsupported: \(.unsupported_claims)"' "$RESEARCH_FILE")

$(if jq -e '.validation.concerns | length > 0' "$RESEARCH_FILE" >/dev/null 2>&1; then
    echo -e "\n### ⚠️ Concerns\n"
    jq -r '.validation.concerns[]? | "- **\(.type)** (\(.severity) severity): \(.description)"' "$RESEARCH_FILE"
fi)

$(if jq -e '.validation.claim_validation | map(select(.status != "verified")) | length > 0' "$RESEARCH_FILE" >/dev/null 2>&1; then
    echo -e "\n### Questionable or Unsupported Claims\n"
    jq -r '.validation.claim_validation[]? | select(.status != "verified") | "- **\(.claim)** - Status: `\(.status)`\n  - Notes: \(.notes)"' "$RESEARCH_FILE"
fi)

---

## 🧩 Knowledge Gaps

$(if jq -e '.knowledge_gaps | length > 0' "$RESEARCH_FILE" >/dev/null 2>&1; then
    jq -r '.knowledge_gaps[]? | "- \(.)"' "$RESEARCH_FILE"
else
    echo "No significant knowledge gaps identified."
fi)

---

## 🔗 Related Topics

$(if jq -e '.related_topics | length > 0' "$RESEARCH_FILE" >/dev/null 2>&1; then
    jq -r '.related_topics[]? | "- \(.)"' "$RESEARCH_FILE"
else
    echo "No related topics suggested."
fi)

---

## 📚 Methodology

This research was conducted using a multi-agent research system powered by Claude Code:

1. **Planning Phase**: Research question was decomposed into focused sub-tasks
2. **Research Phase**: Parallel execution using specialized agents:
   - Web Researcher: Performed targeted web searches and source analysis
   - Code Analyzer: Examined relevant codebases and implementations
3. **Synthesis Phase**: Findings consolidated into coherent narrative
4. **Validation Phase**: Claims cross-referenced and verified

**Quality Standards**:
- Minimum 3 sources per major claim
- Source credibility assessment
- Conflict acknowledgment
- Confidence scoring

---

## 📖 All Sources

$(jq -r '[.sections[]?.citations[]?] | unique_by(.url) | sort_by(.title) | .[] | "- [\(.title)](\(.url))"' "$RESEARCH_FILE")

---

*Generated by Deep Delve powered by [Claude Code](https://claude.com/claude-code)*
EOF
