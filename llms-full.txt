# CConductor - Technical Reference for LLMs

Repository: https://github.com/yaniv-golan/cconductor

## System Overview

CConductor is a Bash-first, mission-based multi-agent research platform. A streaming mission orchestrator coordinates specialized Claude Code agents to plan, gather evidence, remediate quality issues, and synthesize cited research reports. Sessions emit a structured directory layout (`INDEX.json`, generated README, `artifacts/`, `cache/`, `evidence/`, `inputs/`, `knowledge/`, `library/`, `logs/`, `meta/`, `report/`, `viewer/`, `work/`), keeping provenance and dashboards consistent. Domain-aware quality heuristics and watchdog controls ensure reliable, auditable research runs.

### Core Architecture (v0.4.1)

- **Language**: Bash 4.0+ (cross-platform: macOS, Linux, Windows via WSL2/Git Bash)
- **Agent Runtime**: Claude Code CLI (required – run `claude`, use `/login` + `/status`)
- **Dependencies**: `jq` (JSON), `curl` (HTTP), `bc` (math), `ripgrep` (lint/tooling), `git`, optional `dialog`
- **Data & State**: JSON mission state + manifests, Markdown reports, content-addressed artifacts
- **Orchestration**: Streaming mission loop with configurable watchdog + timeout controls
- **Agents & Skills**: Capability-aware registry (16 capabilities, 12 output types) with per-agent tool restrictions

### Key Capabilities 

- Streaming mission orchestration with configurable watchdog + timeout controls
- Structured session artifacts (`INDEX.json`, README generator, manifests, provenance) for fast audit/replay
- Capability-aware agent registry (16 capabilities) with automated tool/domain restrictions
- Domain-aware quality surface: confidence metrics, stakeholder coverage, remediation loops
- Multi-source research (academic, web, local PDFs/code) with cache-aware fetch/search tooling
- Autonomous budget tracking (USD, minutes, invocations) surfaced in mission state + journals
- Interactive TUI wizard, resume + refinement flows, mission extensions, and quick CLI help
- Evidence management: content-addressed artifacts, paragraph-level citations, library memory digests
- Distribution pipeline: Homebrew tap, Docker image, install script, and release automation workflows
- Custom knowledge base ingestion, safe jq helpers, and lint guardrails for maintainability

## Installation

### Prerequisites

```bash
# Core tooling
node --version        # v18+
npm --version         # bundled with Node.js
python3 --version     # required for knowledge graph tooling
bash --version        # must be >= 4.0 (upgrade on macOS via Homebrew)
jq --version
curl --version
bc --version
ripgrep --version
git --version

# Install Claude Code CLI (REQUIRED)
curl -fsSL https://claude.ai/install.sh | bash

# Authenticate (Claude prompt -> /login, then /status)
claude       # launches the CLI
/login       # inside the CLI prompt
/status
```

### macOS Bash 4.0+ Installation

```bash
brew install bash  # macOS ships with Bash 3.2; Homebrew provides >=4.0
# Apple Silicon path: /opt/homebrew/bin/bash
# Intel path: /usr/local/bin/bash
```

### Setup

```bash
git clone https://github.com/yaniv-golan/cconductor.git
cd cconductor
./cconductor --help         # confirm CLI wiring + watchdog toggles
./cconductor --init --yes   # prepare caches, mission templates, quality gates
```

### Distribution Options

- **Homebrew Tap (macOS/Linux)**  
  ```bash
  brew install yaniv-golan/cconductor/cconductor
  cconductor --init --yes
  ```
- **Docker Image**  
  ```bash
  docker run --rm -v "$PWD":/workspace yanivgolan/cconductor:latest \
    cconductor "Research topic"
  ```
- **Installer Script** – Latest release bundles an install script:  
  `curl -fsSL https://github.com/yaniv-golan/cconductor/releases/latest/download/install.sh | bash`

## Basic Usage

### Commands

```bash
# Discover CLI flags (watchdog/timeouts, debug, cache bypass)
./cconductor --help

# Interactive mode (recommended for new users)
./cconductor

# Start research
./cconductor "research question"

# Start research with specific mission type
./cconductor "research question" --mission academic-research
./cconductor "research question" --mission market-research
./cconductor "research question" --mission competitive-analysis
./cconductor "research question" --mission technical-analysis

# Research from markdown file
./cconductor --question-file query.md --mission academic-research

# Research with local files (PDFs, markdown, text)
./cconductor "question" --input-dir /path/to/files/ --mission market-research

# Cache control (fine-grained control over web caching)
./cconductor "question" --no-cache              # Disable all caching
./cconductor "question" --no-web-fetch-cache    # Skip web fetch cache only
./cconductor "question" --no-web-search-cache   # Skip web search cache only

# Watchdog/timeout toggles (override defaults on demand)
./cconductor "question" --enable-watchdog --enable-agent-timeouts
./cconductor "question" --disable-watchdog --disable-agent-timeouts

# Session management
./cconductor sessions list              # List all sessions
./cconductor sessions latest            # View latest results
./cconductor sessions viewer mission_ID # View research dashboard
./cconductor sessions resume mission_ID # Resume research
./cconductor sessions resume mission_ID --refine "Focus on 2024 papers"

# Check status
./cconductor status

# Export research journal
bash src/utils/export-journal.sh research-sessions/mission_ID

# Regenerate session README after manual edits
./src/utils/session-readme-generator.sh research-sessions/mission_ID
```

### Mission Types

- **academic-research**: Academic literature review with peer-reviewed sources
- **market-research**: Market sizing and competitive landscape analysis
- **competitive-analysis**: Competitive analysis with market positioning
- **technical-analysis**: Technical architecture and implementation analysis

### Typical Research Duration

- Simple queries: 5-15 minutes
- Complex queries: 20-40 minutes
- Academic with PDFs: 40-90 minutes

## Session Layout & Artifacts

Each mission writes to `research-sessions/mission_<id>/` with a deterministic structure:

- `INDEX.json` – mission summary + quick links consumed by dashboards/CLI
- `README.md` – generated by `session-readme-generator.sh` with progress, metrics, evidence map
- `10_inputs/`, `20_cache/`, `30_evidence/`, `40_knowledge/`, `50_library/`, `60_logs/`, `70_report/`, `80_viewer/`, `90_work/`, and `meta/`
- `meta/mission_state.json` – streaming mission metrics (iterations, elapsed minutes, watchdog health, budget thresholds)
- `artifacts/quality-gate-summary.json` – gate results + stakeholder coverage
- `report/mission-report.md` + `report/confidence_surface.json` – final synthesis with structured quality metrics

Artifacts are content-addressed where applicable and synchronized via `quality-surface-sync.sh`, `meta-manifest-generator.sh`, and `provenance-generator.sh`.

## Configuration

Configuration uses overlay pattern: `*.default.json` files in `config/` directory, user overrides in `~/.config/cconductor/`.

### Key Configuration Files

**config/cconductor-config.default.json** → override with `~/.config/cconductor/cconductor-config.json`
- Research preferences (default mode, quality thresholds)
- Agent settings (timeouts, retries, parallel execution)
- Output preferences

**config/security-config.default.json** → override with `~/.config/cconductor/security-config.json`
- security_profile: "strict" (default), "permissive", "max_automation"
- Domain allowlists/blocklists
- Content validation rules

**config/cconductor-modes.default.json** → override with `~/.config/cconductor/cconductor-modes.json`
- default, scientific, market, technical, literature_review
- Mode-specific agent configurations

**config/paths.default.json** → override with `~/.config/cconductor/paths.json`
- Override platform default paths (session dir, cache, library)

**config/adaptive-config.default.json** → override with `~/.config/cconductor/adaptive-config.json`
- Termination conditions
- Task generation settings

**config/quality-gate.default.json**: Quality gate diagnostics
- Configurable quality thresholds
- Automated remediation triggers
- Granular quality metrics control

**config/stakeholder-patterns.default.json**: Domain-aware stakeholder heuristics
- Extend source classification by copying to `~/.config/cconductor/stakeholder-patterns.json`
- Used by `domain-compliance-check.sh` and the quality surface pipeline

**config/safe-fetch-policy.default.json**: Safe-fetch security
- URL restrictions (localhost, IP addresses)
- Content restrictions (executables, archives)
- Configurable blocking policies

### Security Profiles

```json
{
  "security_profile": "strict"  // Maximum safety, prompts for unknown domains
  "security_profile": "permissive"  // Auto-allows trusted commercial sites
  "security_profile": "max_automation"  // Minimal prompts (testing/VMs only)
}
```

### Platform-Specific Paths

**macOS**:
- Config: `~/.config/cconductor/`
- Data: `~/Library/Application Support/CConductor/`
- Cache: `~/Library/Caches/CConductor/`
- Logs: `~/Library/Logs/CConductor/`

**Linux (XDG)**:
- Config: `~/.config/cconductor/`
- Data: `~/.local/share/cconductor/`
- Cache: `~/.cache/cconductor/`
- Logs: `~/.local/state/cconductor/`

**Get exact paths**:
```bash
./src/utils/path-resolver.sh resolve session_dir
./src/utils/path-resolver.sh resolve knowledge_base_custom_dir
```

## Custom Knowledge

Add domain expertise via markdown files in OS-appropriate knowledge directory:
- macOS: `~/Library/Application Support/CConductor/knowledge-base-custom/`
- Linux: `~/.local/share/cconductor/knowledge-base-custom/`

**Template**:
```markdown
## Overview
[What this knowledge covers]

## Key Concepts
- Term 1: Definition
- Term 2: Definition

## Important Facts
- Fact with numbers/dates
- Specific data points

## Data Sources
- Source 1: URL and description
- Source 2: URL and description

## Research Tips
- How to research this domain effectively
```

Files are auto-discovered. No configuration required.

## Quality Scoring & Confidence Surface

Each mission emits a quality gate summary and `report/confidence_surface.json`. Scores (0-100) aggregate:

1. **Source Quality** – weighted authority (peer-reviewed, official, primary sources) vs. medium/low credibility.
2. **Stakeholder Coverage** – domain heuristics ensure critical stakeholder voices are represented (regulators, operators, advocates, etc.). Backed by `domain-compliance-check.sh` + stakeholder patterns.
3. **Evidence Depth** – citation density, corroboration across independent domains, and whether claims include primary evidence.
4. **Temporal Fitness** – recency of newest evidence vs. mission requirements.
5. **Contradiction Health** – unresolved contradictions or knowledge graph gaps lower the surface score.

Quality gates enforce thresholds (min citations, trust score, independent domains). When failures occur, the remediation loop re-runs research with explicit guidance, then rechecks the gate.

### Score Bands

- **90-100**: Excellent – publishable, all thresholds cleared
- **80-89**: Strong – professional quality, minor optional follow-ups
- **70-79**: Acceptable – usable with known limitations
- **60-69**: Needs Review – remediation recommended
- **<60**: Fails Gate – blocking issues remain

### Improving Quality

```bash
# Resume with guidance (strongest signal)
./cconductor sessions resume mission_ID --refine "Need recent (≤540 day) regulatory sources"

# Inspect quality surfaces / gate diagnostics
cat research-sessions/mission_ID/artifacts/quality-gate-summary.json | jq
cat research-sessions/mission_ID/report/confidence_surface.json | jq

# Extend remediation attempts if needed
cp config/quality-gate.default.json ~/.config/cconductor/quality-gate.json
tmp=$(mktemp)
jq '.remediation.max_attempts = 2' ~/.config/cconductor/quality-gate.json > "$tmp"
mv "$tmp" ~/.config/cconductor/quality-gate.json

# Supplement stakeholder coverage
cp config/stakeholder-patterns.default.json ~/.config/cconductor/stakeholder-patterns.json
```

Other levers: pick the right mission (`--mission academic-research` for scholarly depth), provide authoritative PDFs via `--input-dir`, enable watchdog/timeouts for long investigations, and avoid interrupting the streaming loop before synthesis completes.

## Citations and Bibliography

### In-Text Citations

```markdown
Docker uses containerization [1]. Released in 2013 [2], it gained adoption [3][4].
```

### Bibliography Format

```markdown
## References

[1] Author(s). (Year). "Title." Publication. URL/DOI

[2] Docker Inc. (2024). "What is Docker?" Docker Documentation.
    Retrieved from https://docs.docker.com/
```

### For Academic Use

CConductor provides:
- All major claims cited
- Complete bibliography with URLs/DOIs
- Multiple sources for key claims

May need to add:
- Format adjustments for specific journal styles (APA, MLA, Chicago)
- DOIs for papers if not auto-included
- Page numbers for direct quotes

Trigger academic mode with keywords: "peer-reviewed", "systematic review", "meta-analysis"

## Common Issues and Solutions

### #1 Most Common: Authentication Error

**Symptoms**: "Invalid API key", "Please run /login", research fails immediately

**Solution**:
```bash
claude            # Launches CLI prompt
/login            # Run inside the prompt, completes browser auth flow
/status           # Confirms account, credit tier, and plan
# Exit back to shell with Ctrl+C twice
```

**Requirements**: Claude Pro/Max subscription or API credits (free accounts don't have CLI access)

### Claude Code CLI Not Found

```bash
# Check Node.js
node --version    # Must be v18+

# Install Claude Code CLI (recommended script)
curl -fsSL https://claude.ai/install.sh | bash

# Verify
claude --version
```

### Bash Version Error (macOS)

macOS ships with Bash 3.2. CConductor requires 4.0+.

```bash
brew install bash
# Use: /opt/homebrew/bin/bash (Apple Silicon) or /usr/local/bin/bash (Intel)
```

### Research Hangs or Freezes

Check if actually stuck:
```bash
ps aux | grep cconductor
tail -f research-sessions/mission_ID/60_logs/events.jsonl  # Streaming events
cat research-sessions/mission_ID/meta/mission_state.json | jq '.streaming.status'
```

If genuinely stuck:
```bash
# Find PID from ps output
kill -INT <PID>    # Graceful interrupt
# Wait 30 seconds
kill -9 <PID>      # Force if needed

# Resume
./cconductor sessions resume mission_ID
```

### Session Locked Error

**Cause**: Stale lock files from crashed process

**Solution**:
```bash
# Check for running processes
ps aux | grep cconductor

# Kill if stuck
kill <PID>

# Remove locks
find research-sessions -name "*.lock" -exec rm -rf {} +

# Resume
./cconductor resume session_ID
```

### Low Quality Score

**Quick fixes**:
1. Resume research: `./cconductor sessions resume mission_ID --refine "guidance"`
2. Use specific mission type: `--mission academic-research`
3. More specific question with dates/keywords
4. Provide PDF sources via `--input-dir`

### Missing Citations

**Solutions**:
1. Resume research with refinement
2. Use academic mission: `--mission academic-research`
3. Use keywords: "peer-reviewed studies on X"
4. Provide academic PDFs via `--input-dir`

### API Key Issues

```bash
# Check if set
echo $ANTHROPIC_API_KEY

# Set if needed
export ANTHROPIC_API_KEY="sk-ant-..."

# Make permanent (add to ~/.bashrc or ~/.zshrc)
echo 'export ANTHROPIC_API_KEY="sk-ant-..."' >> ~/.bashrc
source ~/.bashrc
```

### Configuration Not Taking Effect

**Checklist**:
```bash
# 1. Edit correct file (*.json not *.default.json)
ls -la config/*.json

# 2. Validate JSON syntax
jq empty config/cconductor-config.json

# 3. Check file permissions
ls -la config/cconductor-config.json

# 4. Restart research (changes only apply to new sessions)
```

### Can't Find Research Results

```bash
# View latest
./cconductor sessions latest

# List all sessions
./cconductor sessions list

# Find report 
ls research-sessions/mission_*/report/mission-report.md

# Check .latest marker
cat research-sessions/.latest
```

## Development and Contributing

### Code Standards

- Bash 4.0+ with `set -euo pipefail`
- 2-space indentation
- snake_case functions and variables
- UPPERCASE constants
- Always quote variables: `"$variable"`
- ShellCheck validation required

### Testing

```bash
# Run all tests
./tests/run-all-tests.sh

# Lint specific file
shellcheck path/to/script.sh

# Lint all scripts
find . -name "*.sh" -type f -not -path "./.git/*" | while read -r file; do
    shellcheck "$file" || exit 1
done
```

### Pre-commit Hook

Repository includes pre-commit hook that runs ShellCheck automatically.

### Pull Request Process

1. Create branch from main: `git checkout -b feature/name`
2. Follow coding standards and add tests
3. Run tests: `./tests/run-all-tests.sh`
4. Update documentation and CHANGELOG.md
5. Ensure ShellCheck passes
6. Commit with clear messages (feat/fix/docs/refactor/test/chore)
7. Push and create PR

## Session Structure 

```
research-sessions/mission_TIMESTAMP/
├── INDEX.json                   # Session manifest with navigation
├── .mcp.json                    # MCP configuration
├── meta/                     # Session metadata and provenance
│   ├── session.json             # Session state and objectives
│   └── provenance.json          # Environment and config hashes
├── inputs/                   # User-provided inputs
│   ├── prompt.txt               # Research question
│   └── input-files.json         # Input manifest
├── cache/                    # Live mission cache artifacts
│   ├── web/                     # Cached web content
│   └── pdf/                     # Downloaded PDFs
├── work/                     # Agent working directories
│   └── <agent>/
│       ├── input.txt
│       ├── output.json
│       └── findings-*.json
├── knowledge/                # Knowledge graph and session knowledge
│   └── knowledge-graph.json     # Central knowledge state
├── artifacts/                # Agent-produced artifacts
│   ├── manifest.json            # Artifact registry
│   └── <agent>/
│       └── *.json
├── logs/                     # Structured logs
│   ├── events.jsonl             # All system events
│   ├── orchestration.jsonl      # Orchestrator decisions
│   └── quality-gate.json        # Quality evaluation
├── report/                   # Final deliverables
│   ├── mission-report.md        # Synthesized research report
│   └── research-journal.md      # Chronological journal
└── viewer/                   # Interactive dashboard
├── dashboard-metrics.json       # Real-time metrics
├── .cconductor-root             # Project root marker for relocated sessions
└── .claude/                     # Per-session Claude config
    ├── agents/                  # Agent definitions
    ├── settings.json            # Claude settings
    └── hooks/                   # Tool use hooks
```

## File Operations

**Finding paths**:
```bash
SESSION_DIR=$(./src/utils/path-resolver.sh resolve session_dir)
KNOWLEDGE_DIR=$(./src/utils/path-resolver.sh resolve knowledge_base_custom_dir)
```

**Cleaning old sessions** 
```bash
# Remove sessions older than 30 days
find research-sessions -name "mission_*" -type d -mtime +30 -exec rm -rf {} +
```

**Archiving**:
```bash
tar -czf research-archive-$(date +%Y%m).tar.gz research-sessions/mission_old*
rm -rf research-sessions/mission_old*
```

## Agent Invocation

CConductor uses `src/utils/invoke-agent.sh` with `invoke_agent_v2()` function:

**Key features**:
- System prompt injection via `--append-system-prompt`
- Tool restrictions via `--allowedTools` and `--disallowedTools`
- Structured JSON output via `--output-format json`
- Domain restrictions: `WebFetch(*.edu)`, `WebFetch(domain.com)`
- Session continuity via `--resume` (for research-coordinator only)

**Tool restrictions** defined in `src/utils/agent-tools.json`.

## Environment Variables

```bash
ANTHROPIC_API_KEY          # Claude API key (required if not using claude login)
CCONDUCTOR_DEBUG=1         # Enable debug output
CCONDUCTOR_SESSION_DIR     # Override session directory
```

## Performance Notes

- Research sessions use multiple Claude API calls
- Complex research: $2-10 typical cost
- Academic with PDFs: $5-15 typical cost
- Parallel agent execution (configurable: max_parallel_agents)
- PDF caching via SHA-256 content addressing

## Security Considerations

- Domain allowlists prevent access to malicious sites
- Three security profiles: strict (default), permissive, max_automation
- Audit logging of all external access
- File locking prevents race conditions
- Atomic writes for state files

## Known Limitations 

- Single machine execution (not distributed)
- File-based state (potential bottleneck at scale)
- Requires Claude Code CLI (cannot use API key alone)
- Input directory: flat only (no recursive discovery)
- Supported input files: PDF, MD, TXT only
- Parallel agent invocation not yet implemented

## Related Documentation (Raw URLs for Direct LLM Access)

**Core**:
- README: https://raw.githubusercontent.com/yaniv-golan/cconductor/main/README.md
- Usage Guide: https://raw.githubusercontent.com/yaniv-golan/cconductor/main/USAGE.md
- Contributing: https://raw.githubusercontent.com/yaniv-golan/cconductor/main/CONTRIBUTING.md

**User Guides**:
- User Guide: https://raw.githubusercontent.com/yaniv-golan/cconductor/main/docs/USER_GUIDE.md
- Quick Reference: https://raw.githubusercontent.com/yaniv-golan/cconductor/main/docs/QUICK_REFERENCE.md
- Troubleshooting: https://raw.githubusercontent.com/yaniv-golan/cconductor/main/docs/TROUBLESHOOTING.md

**Configuration**:
- Configuration Reference: https://raw.githubusercontent.com/yaniv-golan/cconductor/main/docs/CONFIGURATION_REFERENCE.md
- Installation & Config: https://raw.githubusercontent.com/yaniv-golan/cconductor/main/docs/INSTALLATION_CONFIG.md
- Security Guide: https://raw.githubusercontent.com/yaniv-golan/cconductor/main/docs/SECURITY_GUIDE.md

**Features**:
- Quality Guide: https://raw.githubusercontent.com/yaniv-golan/cconductor/main/docs/QUALITY_GUIDE.md
- Citations Guide: https://raw.githubusercontent.com/yaniv-golan/cconductor/main/docs/CITATIONS_GUIDE.md
- Custom Knowledge: https://raw.githubusercontent.com/yaniv-golan/cconductor/main/docs/CUSTOM_KNOWLEDGE.md
- PDF Research: https://raw.githubusercontent.com/yaniv-golan/cconductor/main/docs/PDF_RESEARCH_GUIDE.md
- Session Resume: https://raw.githubusercontent.com/yaniv-golan/cconductor/main/docs/SESSION_RESUME_GUIDE.md

**Mission System **:
- Mission Quick Start: https://raw.githubusercontent.com/yaniv-golan/cconductor/main/docs/MISSION_QUICKSTART.md
- Agent Metadata Schema: https://raw.githubusercontent.com/yaniv-golan/cconductor/main/docs/AGENT_METADATA_SCHEMA.md
- Events Contract: https://raw.githubusercontent.com/yaniv-golan/cconductor/main/docs/EVENTS_CONTRACT.md
- Extending Capabilities: https://raw.githubusercontent.com/yaniv-golan/cconductor/main/docs/EXTENDING_CAPABILITIES.md

**Technical**:
- Knowledge System: https://raw.githubusercontent.com/yaniv-golan/cconductor/main/docs/KNOWLEDGE_SYSTEM_TECHNICAL.md
- Agent Tools Config: https://raw.githubusercontent.com/yaniv-golan/cconductor/main/docs/AGENT_TOOLS_CONFIG.md
- Session Continuity: https://raw.githubusercontent.com/yaniv-golan/cconductor/main/docs/SESSION_CONTINUITY_GUIDE.md
- KG Artifact Pattern: https://raw.githubusercontent.com/yaniv-golan/cconductor/main/docs/KG_ARTIFACT_PATTERN.md
- Error Log Format: https://raw.githubusercontent.com/yaniv-golan/cconductor/main/docs/ERROR_LOG_FORMAT.md

**Changelog**: https://raw.githubusercontent.com/yaniv-golan/cconductor/main/CHANGELOG.md
