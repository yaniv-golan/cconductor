#!/usr/bin/env bash
# CConductor - AI Research, Orchestrated
#
# Requires: Bash 4.0+

set -euo pipefail

CCONDUCTOR_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
VERSION="$(cat "$CCONDUCTOR_ROOT/VERSION" 2>/dev/null | tr -d '\n' || echo "unknown")"

# Ensure we run with Bash 4+ by preferring Homebrew bash if available
if [ "${BASH_VERSINFO[0]}" -lt 4 ]; then
    if command -v /opt/homebrew/bin/bash >/dev/null 2>&1; then
        exec /opt/homebrew/bin/bash "$0" "$@"
    elif command -v /usr/local/bin/bash >/dev/null 2>&1; then
        exec /usr/local/bin/bash "$0" "$@"
    else
        echo "Error: Bash 4.0 or higher is required to run CConductor." >&2
        exit 1
    fi
fi

# Debug mode support
if [ "${CCONDUCTOR_DEBUG:-0}" = "1" ]; then
    echo "🐛 Debug mode enabled" >&2
    echo "   All errors will be logged and displayed" >&2
    echo "   Check logs/system-errors.log in the session directory for details" >&2
    echo "" >&2
    set -x  # Enable bash trace mode
fi

# Source CLI parser
# shellcheck disable=SC1091
source "$CCONDUCTOR_ROOT/src/utils/cli-parser.sh"

# Parse arguments early to check for --verbose and --debug flags
parse_cli_args "$@"

# Debug mode support (check both flag and environment variable)
if has_flag "debug" || [ "${CCONDUCTOR_DEBUG:-0}" = "1" ]; then
    export CCONDUCTOR_DEBUG=1
    set -x  # Enable bash trace
    echo "🐛 Debug mode enabled - bash trace active" >&2
    echo "" >&2
fi

# Verbose mode support (check both flag and environment variable)
if has_flag "verbose" || [ "${CCONDUCTOR_VERBOSE:-0}" = "1" ]; then
    export CCONDUCTOR_VERBOSE=1
    echo "📢 Verbose mode enabled - showing detailed progress" >&2
    echo "" >&2
fi

# Cache disable flags
if has_flag "no-cache"; then
    export CCONDUCTOR_DISABLE_WEB_FETCH_CACHE=1
    export CCONDUCTOR_DISABLE_WEB_SEARCH_CACHE=1
else
    if has_flag "no-web-fetch-cache"; then
        export CCONDUCTOR_DISABLE_WEB_FETCH_CACHE=1
    fi
    if has_flag "no-web-search-cache"; then
        export CCONDUCTOR_DISABLE_WEB_SEARCH_CACHE=1
    fi
fi

# Evidence mode flag (controls Stop hook behaviour)
set_evidence_mode() {
    local default_mode="render"
    local selected_mode=""

    if has_flag "evidence-mode"; then
        selected_mode="$(get_flag "evidence-mode")"
    elif [ -n "${CCONDUCTOR_EVIDENCE_MODE:-}" ]; then
        selected_mode="$CCONDUCTOR_EVIDENCE_MODE"
    else
        selected_mode="$default_mode"
    fi

    selected_mode="${selected_mode,,}"
    if [[ -z "$selected_mode" ]]; then
        selected_mode="$default_mode"
    fi

    case "$selected_mode" in
        disabled|collect|render)
            ;;
        *)
            echo "Error: Invalid value for --evidence-mode: $selected_mode" >&2
            echo "Allowed values: disabled, collect, render" >&2
            exit 1
            ;;
    esac

    export CCONDUCTOR_EVIDENCE_MODE="$selected_mode"
}

set_evidence_mode

set_evidence_render() {
    local default_render="footnotes"
    local selected_render=""

    if has_flag "evidence-render"; then
        selected_render="$(get_flag "evidence-render")"
    elif [ -n "${CCONDUCTOR_EVIDENCE_RENDER:-}" ]; then
        selected_render="$CCONDUCTOR_EVIDENCE_RENDER"
    else
        selected_render="$default_render"
    fi

    selected_render="${selected_render,,}"
    if [[ -z "$selected_render" ]]; then
        selected_render="$default_render"
    fi

    case "$selected_render" in
        footnotes|fallback)
            ;;
        *)
            echo "Error: Invalid value for --evidence-render: $selected_render" >&2
            echo "Allowed values: footnotes, fallback" >&2
            exit 1
            ;;
    esac

    export CCONDUCTOR_EVIDENCE_RENDER="$selected_render"
}

set_evidence_render

if [[ "${CCONDUCTOR_VERBOSE:-0}" == "1" ]]; then
    if [ -n "${CCONDUCTOR_CONFIG_DIR:-}" ]; then
        config_dir_display="$CCONDUCTOR_CONFIG_DIR"
    else
        config_dir_display=$("$CCONDUCTOR_ROOT/src/utils/platform-paths.sh" --config 2>/dev/null || echo "auto (platform default)")
    fi
    cache_dir_display=$("$CCONDUCTOR_ROOT/src/utils/path-resolver.sh" resolve cache_dir 2>/dev/null || echo "unavailable")
    web_cache_display=$("$CCONDUCTOR_ROOT/src/utils/path-resolver.sh" resolve web_cache 2>/dev/null || echo "unavailable")
    pdf_cache_display=$("$CCONDUCTOR_ROOT/src/utils/path-resolver.sh" resolve pdf_cache 2>/dev/null || echo "unavailable")
    echo "⚙️  Config directory: $config_dir_display" >&2
    echo "📂 Cache directories:" >&2
    echo "    cache_dir → $cache_dir_display" >&2
    echo "    web_cache → $web_cache_display" >&2
    echo "    pdf_cache → $pdf_cache_display" >&2
    echo "" >&2
fi

# Source verbose utility
# shellcheck disable=SC1091
source "$CCONDUCTOR_ROOT/src/utils/verbose.sh"

# ============================================================================
# Initialization and Update Functions
# ============================================================================
# All init/update functions have been moved to src/utils/init-and-update.sh
# They are sourced below

# shellcheck disable=SC1091
source "$CCONDUCTOR_ROOT/src/utils/init-and-update.sh"

# Version management
show_version() {
    echo "CConductor v$VERSION"
    
    # Trigger async update check
    if [ -f "$CCONDUCTOR_ROOT/src/utils/version-manager.sh" ]; then
        # shellcheck disable=SC1091
        source "$CCONDUCTOR_ROOT/src/utils/version-manager.sh"
        check_for_updates_async
    fi
}

show_help() {
    cat <<EOF
🔍 CConductor v$VERSION - AI Research, Orchestrated

USAGE:
  cconductor                            Interactive mode (dialog-based TUI, requires TTY)
  cconductor <question>                 Start new research
  cconductor --question-file FILE       Start research from markdown file
  cconductor <question> --mission TYPE  Specify mission type (default: general-research)
  cconductor sessions list              List all research sessions
  cconductor sessions latest            Show latest session details
  cconductor sessions viewer [id]       View research journal (auto-launched during research)
  cconductor sessions resume <id>       Resume a session with optional extensions and refinement
  cconductor status                     Check running research processes
  cconductor configure                  Show configuration files
  cconductor --update                   Update to latest version
  cconductor --check-update             Check for updates now
  cconductor --no-update-check          Disable update check for this run
  cconductor --init                     Run/re-run initialization
  cconductor --help                     Show this help
  cconductor --version                  Show version

OPTIONS:
  --question-file FILE             Load research question from markdown or text file
                                   Entire file content is used as the research question
                                   Useful for complex, multi-part research queries
  --mission NAME                   Specify mission type (default: general-research)
                                   Available: general-research, academic-research,
                                   market-research, competitive-analysis, technical-analysis
  --input-dir DIR                  Directory with local files to analyze
                                   Supported: PDFs (.pdf), Markdown (.md), Text (.txt)
                                   PDFs are cached; text files are loaded into session
  --non-interactive, -y            Skip interactive plan confirmation
                                   Useful for automation and testing
                                   Note: Flags must come AFTER the question
  --verbose                        Show detailed, user-friendly progress messages
                                   Displays agent reasoning, tool use, and file operations
                                   Alternative: Set CCONDUCTOR_VERBOSE=1 environment variable
  --no-cache                       Disable both WebFetch and WebSearch caches for this run
  --no-web-fetch-cache             Disable only WebFetch caching (always fetch live content)
  --no-web-search-cache            Disable only WebSearch caching (always run live searches)
  --evidence-mode MODE             Control paragraph-evidence pipeline:
                                   render (default), collect, disabled
  --evidence-render STYLE          Evidence rendering style for reports:
                                   footnotes (default) or fallback

SESSIONS SUBCOMMANDS:
  list                                  List all research sessions
  latest                                Show latest session with status and findings
  viewer [session_id]                   Launch research journal viewer for a session
  resume <session_id>                   Resume a previous session
    --extend-iterations N               Add N additional iterations to the session
    --extend-time M                     Add M additional minutes to the session
    --refine "guidance"                 Add refinement guidance when resuming
    --refine-file path/to/file.md       Load refinement from file

EXAMPLES:
  # Interactive mode (TUI)
  cconductor
  # Note: Requires 'dialog' utility; falls back to simple prompts if not found
  #       In CI or non-TTY environments, provide explicit arguments
  
  # Basic research
  cconductor "What are the latest advances in CRISPR?"
  cconductor "SaaS market size 2024"
  
  # Research with specific mission type
  cconductor "Competitor landscape for SaaS CRM" --mission competitive-analysis
  cconductor "Market size and trends" --mission market-research
  cconductor "Quantum computing papers" --mission academic-research
  
  # Research from markdown file (complex queries)
  cconductor --question-file research-query.md
  cconductor --question-file ./queries/research-query.md --non-interactive
  
  # Non-interactive research (no confirmation prompts)
  cconductor "What are neural networks?" --non-interactive
  cconductor "What is quantum computing?" -y
  
  # Research with local materials
  cconductor "Analyze this pitch deck" --input-dir ./pitch-materials/
  cconductor "Summarize these reports" --input-dir ~/Documents/research/
  
  # Session management
  cconductor sessions list
  cconductor sessions latest
  cconductor sessions viewer mission_123
  cconductor sessions resume mission_123
  cconductor sessions resume mission_123 --extend-iterations 5
  cconductor sessions resume mission_123 --extend-time 30
  cconductor sessions resume mission_123 --extend-iterations 10 --refine "Focus more on Constitutional AI"
  
  # System commands
  cconductor status
  cconductor --init --yes               Run initialization non-interactively

CONFIGURATION:
  Config files are stored in OS-appropriate locations:
    • macOS:   ~/.config/cconductor/
    • Linux:   ~/.config/cconductor/
    • Windows: %APPDATA%\\CConductor\\

  Create custom configs:
    • ./src/utils/config-loader.sh init cconductor-config
    • ./src/utils/config-loader.sh init security-config
    • ./src/utils/config-loader.sh list    (see all configs)

  Add custom knowledge:
    • macOS:   ~/Library/Application Support/CConductor/knowledge-base-custom/
    • Linux:   ~/.local/share/cconductor/knowledge-base-custom/
    • Windows: %LOCALAPPDATA%\\CConductor\\knowledge-base-custom\\

RESULTS:
  Reports are saved to OS-appropriate data directories:
    • macOS:   ~/Library/Application Support/CConductor/research-sessions/
    • Linux:   ~/.local/share/cconductor/research-sessions/
    • Windows: %LOCALAPPDATA%\\CConductor\\research-sessions\\
  
  Use: ./src/utils/path-resolver.sh resolve session_dir (to find exact path)

DOCUMENTATION:
  Quick start:  docs/QUICK_REFERENCE.md
  User guide:   docs/USER_GUIDE.md
  Troubleshoot: docs/TROUBLESHOOTING.md
  README:       README.md

EOF
}

# ============================================================================
# TUI Functions - Interactive text user interface
# ============================================================================
# All TUI functions have been moved to src/utils/tui.sh
# They are loaded on-demand when interactive mode is used

handle_research() {
    local question="$1"
    
    # Check initialization before running research
    if ! check_initialization; then
        run_initialization true
    fi
    
    # CRITICAL: Check for Claude Code CLI before doing ANY work
    if ! command -v claude &> /dev/null; then
        echo "" >&2
        echo "❌ Error: Claude Code CLI not found" >&2
        echo "" >&2
        echo "CConductor requires Claude Code CLI to function." >&2
        echo "This is the AI agent runtime that powers the multi-agent system." >&2
        echo "" >&2
        
        # Check if npm is available
        if ! command -v npm &> /dev/null; then
            echo "First, install Node.js (includes npm):" >&2
            echo "" >&2
            echo "  macOS:" >&2
            if ! command -v brew &> /dev/null; then
                echo "    1. Install Homebrew:" >&2
                echo "       /bin/bash -c \"\$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"" >&2
                echo "    2. Install Node.js:" >&2
                echo "       brew install node" >&2
            else
                echo "    brew install node" >&2
            fi
            echo "" >&2
            echo "  Ubuntu:" >&2
            echo "    curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -" >&2
            echo "    sudo apt-get install -y nodejs" >&2
            echo "" >&2
            echo "Then install Claude Code CLI:" >&2
        else
            echo "Install with:" >&2
        fi
        echo "  npm install -g @anthropic-ai/claude-code" >&2
        echo "" >&2
        echo "Requirements:" >&2
        echo "  • Node.js 18 or newer (provides npm)" >&2
        echo "  • Claude.ai or Console account (Pro/Max subscription or API credits)" >&2
        echo "" >&2
        echo "See: https://docs.anthropic.com/en/docs/claude-code/overview" >&2
        echo "" >&2
        exit 1
    fi
    
    # Build mission system command
    # Use --mission flag if provided, otherwise default to general-research
    local mission_name
    if has_flag "mission"; then
        mission_name=$(get_flag "mission")
    else
        mission_name="general-research"
    fi
    
    local mission_cmd=("$CCONDUCTOR_ROOT/src/cconductor-mission.sh" "run" "--mission" "$mission_name")
    
    # Check for --input-dir flag
    if has_flag "input-dir"; then
        local input_dir
        input_dir=$(get_flag "input-dir")
        
        # Validate input directory exists
        if [ ! -d "$input_dir" ]; then
            echo "Error: Input directory not found: $input_dir" >&2
            exit 1
        fi
        
        # Resolve to absolute path
        input_dir=$(cd "$input_dir" && pwd)
        
        echo "📁 Loading input files from: $input_dir"
        echo ""
        
        mission_cmd+=(--input-dir "$input_dir")
    fi
    
    # Check for --non-interactive or -y flag
    if has_flag "non-interactive" || has_flag "y"; then
        mission_cmd+=(--non-interactive)
    fi
    
    # Add research question
    mission_cmd+=("$question")
    
    # Call mission system 
    "${mission_cmd[@]}"
    
    # Show update notification after research
    if [ "${CCONDUCTOR_NO_UPDATE_CHECK:-0}" != "1" ] && [ -f "$CCONDUCTOR_ROOT/src/utils/version-manager.sh" ]; then
        # shellcheck disable=SC1091
        source "$CCONDUCTOR_ROOT/src/utils/version-manager.sh"
        show_cached_notification || check_for_updates_async
    fi
}

main() {
    # CLI arguments already parsed at top of script for --verbose flag
    # No need to parse again
    
    # Handle special flags first
    if has_flag "help" || has_flag "h"; then
        show_help
        return 0
    fi
    
    if has_flag "version" || has_flag "v"; then
        show_version
        return 0
    fi
    
    if has_flag "update"; then
        perform_update
        return 0
    fi
    
    if has_flag "check-update"; then
        if [ -f "$CCONDUCTOR_ROOT/src/utils/version-manager.sh" ]; then
            # shellcheck disable=SC1091
            source "$CCONDUCTOR_ROOT/src/utils/version-manager.sh"
            check_for_updates_sync
        else
            echo "Version manager not available"
            exit 1
        fi
        return 0
    fi
    
    if has_flag "no-update-check"; then
        export CCONDUCTOR_NO_UPDATE_CHECK=1
    fi
    
    if has_flag "init"; then
        if has_flag "yes" || has_flag "y"; then
            run_initialization false
        else
            run_initialization true
        fi
        return 0
    fi
    
    # Handle --question-file flag (load research question from file)
    if has_flag "question-file"; then
        local question_file
        question_file=$(get_flag "question-file")
        
        # Validate file exists
        if [ ! -f "$question_file" ]; then
            echo "Error: Question file not found: $question_file" >&2
            exit 1
        fi
        
        # Read file content as research question
        local question
        question=$(cat "$question_file")
        
        if [ -z "$question" ]; then
            echo "Error: Question file is empty: $question_file" >&2
            exit 1
        fi
        
        echo "📄 Loading research question from: $question_file"
        echo ""
        
        # Handle research with file-based question
        handle_research "$question"
        return 0
    fi
    
    # Get first positional argument (command or research question)
    local command
    command=$(get_arg 0)
    
    # Handle empty command - launch interactive mode
    if [ -z "$command" ]; then
        # Load TUI module on-demand
        # shellcheck disable=SC1091
        source "$CCONDUCTOR_ROOT/src/utils/tui.sh"
        interactive_mode
        return $?
    fi
    
    # Handle commands
    case "$command" in
        sessions)
            # Load session commands module
            # shellcheck disable=SC1091
            source "$CCONDUCTOR_ROOT/src/utils/session-commands.sh"
            local subcommand
            subcommand=$(get_arg 1)
            # Pass subcommand and all remaining arguments
            local session_args=()
            for ((i=2; i<$(get_arg_count); i++)); do
                session_args+=("$(get_arg "$i")")
            done
            handle_sessions_command "$subcommand" "${session_args[@]}"
            ;;
        status)
            echo "Checking for running research sessions..."
            
            # Find cconductor-mission.sh processes
            local pids
            pids=$(pgrep -f "cconductor-mission.sh" || true)
            
            if [ -z "$pids" ]; then
                echo "No active sessions"
            else
                echo ""
                local count=0
                for pid in $pids; do
                    local ppid
                    ppid=$(ps -o ppid= -p "$pid" 2>/dev/null | tr -d ' ')
                    local parent_cmd
                    parent_cmd=$(ps -o command= -p "$ppid" 2>/dev/null || true)
                    
                    # Skip if parent is also cconductor-mission (it's a child process)
                    if ! echo "$parent_cmd" | grep -q "cconductor-mission.sh"; then
                        count=$((count + 1))
                        local start_time
                        start_time=$(ps -o lstart= -p "$pid" 2>/dev/null)
                        
                        echo "Active Session #$count:"
                        echo "  PID: $pid (Parent PID: $ppid)"
                        echo "  Started: $start_time"
                        
                        # Check for child agent processes
                        local child_count
                        child_count=$(pgrep -P "$pid" 2>/dev/null | wc -l | tr -d ' ')
                        if [ "$child_count" -gt 0 ]; then
                            echo "  Status: Running ($child_count child process(es))"
                        else
                            echo "  Status: Idle"
                        fi
                        echo ""
                    fi
                done
                
                if [ $count -eq 0 ]; then
                    echo "No active sessions (only child processes found)"
                fi
            fi
            ;;
        configure|config)
            echo "🔧 CConductor Configuration"
            echo ""
            
            # Get user config directory
            if [ -f "$CCONDUCTOR_ROOT/src/utils/config-loader.sh" ]; then
                # shellcheck disable=SC1091
                source "$CCONDUCTOR_ROOT/src/utils/config-loader.sh"
                
                echo "═══════════════════════════════════════════════════════"
                echo ""
                
                # Show user config location
                local user_config_dir
                user_config_dir=$(get_user_config_dir)
                echo "User Config Directory: $user_config_dir"
                echo ""
                
                # List configs
                "$CCONDUCTOR_ROOT/src/utils/config-loader.sh" list
                echo ""
                
                echo "═══════════════════════════════════════════════════════"
                echo ""
                echo "Create custom config:"
                echo "  ./src/utils/config-loader.sh init <config-name>"
                echo ""
                echo "Edit config:"
                echo "  vim $user_config_dir/<config-name>.json"
                echo ""
                echo "View differences:"
                echo "  ./src/utils/config-loader.sh diff <config-name>"
                echo ""
                echo "Get help:"
                echo "  ./src/utils/config-loader.sh help"
            else
                echo "Error: Config loader not found"
                exit 1
            fi
            ;;
        *)
            # Research question - use adaptive system with optional --input-dir
            handle_research "$command"
            ;;
    esac
}

main "$@"
